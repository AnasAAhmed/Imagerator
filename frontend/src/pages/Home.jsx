import React, { useState, useEffect } from 'react'
import Card from '../components/Card'
import Formfield from '../components/Formfield'
import Loader from '../components/Loader'


const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />)
  } else {
    return (
      <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
    )
  }

}

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searhedResult, setSearhedResult] = useState(null);
  const [searhedTimeout, setSearhedTimeout] = useState(null);

  useEffect(() => {
    const fetchPost = async () => {
      setLoading(true);
      try {
        const res = await fetch("https://anas-imagerator.vercel.app/api/v1/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
        if (res.ok) {
          const result = await res.json();
          setAllPosts(result.data.reverse());
        }
      } catch (error) {
        alert(error)
      } finally {
        setLoading(false);
      }
    }
    fetchPost();
  }, [])

  const handleSearchChange = (e) => {

    clearTimeout(searhedTimeout);
    setSearchText(e.target.value);
    setSearhedTimeout(

      setTimeout(() => {
        const searhResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));

        setSearhedResult(searhResult);
      }, 500)
    );
  }
  return (
    <section className="max-w-7xl mx-auto">
      <div className="">
        <h1 className="font-extrabold text-[#222338] text-[32px]">
          The Community Showcase
        </h1>
        <p className="mt-2 text-[#666e75] text-[18px] max-w-[500px]">Browse through a collection of imaginative and visually stunnig images generated by Imagerator AI</p>
      </div>
      <div className="mt-16">
        <Formfield 
        value={searchText}
        type={"text"}
        name={"text"}
        handleChange={handleSearchChange}
        placeholder={"Search Posts"}
        labelName={"Search Posts"}
        />
      </div>
      <div className="mt-10">

        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-">
                Showing results for <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searhedResult}
                  title="No search results found" />
              ) : (
                <RenderCards
                  data={allPosts}
                  title="No posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  )
}

export default Home
